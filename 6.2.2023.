// Napisati program koji za tri različita predmeta iz datoteka čita
// podatke o studentima koji su položili predmet i gradi tri vezane
// liste. Svaki predmet ima svoju datoteku (Subject1.txt,
// Subject2.txt, Subject3.txt).

// OCJENA 2:
// Iz tri gornje vezane liste napraviti novu na način da za svakog
// studenta postoji samo jedan element u listi, tj. ukoliko je
// student položio više predmeta treba grupirati njegove ocjene u 
// jedan element liste. Ukoliko student nije položio neki predmet,
// tada je njegova ocjena iz tog predmeta 1. Ispisati listu u
// formatu:
//      - lastName firstName (Subject1, Subject2, Subject3)

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME_LEN (32)
#define MAX_SUBJECTS (3)

typedef struct _student* StudentP;
typedef struct _student {
    char firstName[MAX_NAME_LEN];
    char lastName[MAX_NAME_LEN];
    int grades[MAX_SUBJECTS];
    StudentP next;
} Student;

StudentP createNewStudent(char* fName, char* lName, int grade[MAX_SUBJECTS]);
int loadFromFile(StudentP head, const char* fileName);
int addNewReading(StudentP head, StudentP newStudent);

int main() {
    StudentP head1 = (StudentP)malloc(sizeof(Student));
    StudentP head2 = (StudentP)malloc(sizeof(Student));
    StudentP head3 = (StudentP)malloc(sizeof(Student));

    if (head1 == NULL || head2 == NULL || head3 == NULL) {
        printf("ERROR! Could not allocate memmory!\n");
        return EXIT_FAILURE;
    }

    head1->next = NULL;
    head2->next = NULL;
    head3->next = NULL;

    loadFromFile(head1, "SUBJECT1.txt");
    loadFromFile(head2, "SUBJECT2.txt");
    loadFromFile(head3, "SUBJECT3.txt");


    return EXIT_SUCCESS;
}

StudentP createNewStudent(char* fName, char* lName, int grade[MAX_SUBJECTS]) {                  //vidis sam
    StudentP newStudent = (StudentP)malloc(sizeof(Student));
    if (newStudent == NULL) {
        printf("ERROR! Could not allocate memmory!\n");
        return NULL;
    }
    strcpy(newStudent->firstName, fName);
    strcpy(newStudent->lastName, lName);
    for (int i = 0; i < MAX_SUBJECTS; i++) {                                                    //isto
        newStudent->grades[i] = grade[i];
    }
    return newStudent;
}

int loadFromFile(StudentP head, const char* fileName) {
    FILE* fp = fopen(fileName, "r");
    if (fp == NULL) {
        printf("ERROR! Could not open the file!\n");
        return EXIT_FAILURE;
    }
    char fname[MAX_NAME_LEN], lname[MAX_NAME_LEN];
    int grade;
    while (fscanf(fp, "%s %s %d", fname, lname, &grade) == 3) {
        StudentP newStudent = createNewStudent(fname, lname, grade);
        if (newStudent == NULL) {
            printf("ERROR! Could not allocate memmory!\n");
            return EXIT_FAILURE;
        }
        addNewReading(head, newStudent);
    }
    fclose(fp);

    return EXIT_SUCCESS;
}

int addNewReading(StudentP head, StudentP newStudent) {
    StudentP temp = head->next;
    if (head->next == NULL) {
        head->next = newStudent;
        return EXIT_SUCCESS;
    }
    while (temp->next) {
        temp = temp->next;
    }
    temp->next = newStudent;
    return EXIT_SUCCESS;
}
